{"text": "Write a function to reverse a linked list.", "code": "class Node: \r\n\tdef __init__(self, val=0, next=None):\r\n\t\tself.val = val\r\n\t\tself.next = next\r\n\r\ndef reverse_linked_list(head):\r\n\tif not head or not head.next:\r\n\t\treturn head\r\n\tnew_head = reverse_linked_list(head.next)\r\n\thead.next.next = head\r\n\thead.next = None\r\n\treturn new_head", "task_id": 975, "test_setup_code": "class TestLinkedList:\n\tdef __init__(self, values):\n\t\tself.head = None\n\t\tif values:\n\t\t\tself.head = Node(values[0])\n\t\t\tcurrent = self.head\n\t\t\tfor value in values[1:]:\n\t\t\t\tcurrent.next = Node(value)\n\t\t\t\tcurrent = current.next\n\n", "test_list": ["linked_list = TestLinkedList([1, 2, 3, 4, 5])\nreverse_linked_list(linked_list.head)\nassert linked_list.head.val == 5\nassert linked_list.head.next.val == 4\nassert linked_list.head.next.next.val == 3\nassert linked_list.head.next.next.next.val == 2\nassert linked_list.head.next.next.next.next.val == 1", "linked_list = TestLinkedList([1, 2, 3])\nreverse_linked_list(linked_list.head)\nassert linked_list.head.val == 3\nassert linked_list.head.next.val == 2\nassert linked_list.head.next.next.val == 1", "linked_list = TestLinkedList([1])\nreverse_linked_list(linked_list.head)\nassert linked_list.head.val == 1"], "challenge_test_list": []}
{"text": "Wrtie a function for two sum question", "code": "def twoSum(nums, target):\n d = {}\n for i, num in enumerate(nums):\n if target - num in d:\n return [d[target - num], i]\n d[num] = i\n return []", "task_id": 1, "test_setup_code": "", "test_list": ["assert twoSum([2,7,11,15], 9) == [0,1]", "assert twoSum([3,2,4], 6) == [1,2]", "assert twoSum([3,3], 6) == [0,1]"], "challenge_test_list": []}
{"text": "Wrtie a function to find the longest palindromic subsequence's length .", "code": "def longestPalindromeSubseq(s: str) -> int: \r\n n = len(s) \r\n dp = [[0]*n for _ in range(n)] \r\n for i in range(n-1, -1, -1): \r\n dp[i][i] = 1 \r\n for j in range(i+1, n): \r\n if s[i] == s[j]: \r\n dp[i][j] = dp[i+1][j-1] + 2 \r\n else: \r\n dp[i][j] = max(dp[i+1][j], dp[i][j-1]) \r\n return dp[0][-1]", "task_id": 1025, "test_setup_code": "", "test_list": ["assert longestPalindromeSubseq('bbbab') == 4", "assert longestPalindromeSubseq('cbbd') == 2", "assert longestPalindromeSubseq('a') == 1"], "challenge_test_list": []}
{"text": "Wrtie a function to find the median of the two sorted arrays.", "code": "", "task_id": 4, "test_setup_code": "", "test_list": ["assert findMedianSortedArrays([1, 3], [2]) == 2.0", "assert findMedianSortedArrays([1, 2], [3, 4]) == 2.5", "assert findMedianSortedArrays([0, 0], [0, 0]) == 0.0", "assert findMedianSortedArrays([], [1]) == 1.0", "assert findMedianSortedArrays([2], []) == 2.0"], "challenge_test_list": []}
{"text": "Write a function to find longest substring without repeating characters.", "code": "def lengthOfLongestSubstring(s):\n chars = {}\n left = 0\n right = 0\n res = 0\n while right < len(s):\n if s[right] in chars and chars[s[right]] >= left:\n left = chars[s[right]] + 1\n chars[s[right]] = right\n res = max(res, right - left + 1)\n right += 1\n return res", "task_id": 3, "test_setup_code": "", "test_list": ["assert lengthOfLongestSubstring('abcabcbb') == 3", "assert lengthOfLongestSubstring('bbbbb') == 1", "assert lengthOfLongestSubstring('pwwkew') == 3"], "challenge_test_list": []}
{"text": "Write a Python function to convert a string into a zigzag pattern based on a given number of rows. ", "code": "def convert(s: str, numRows: int) -> str:\n    if numRows == 1:\n        return s\n    rows = ['' for _ in range(numRows)]\n    row = 0\n    direction = -1\n    for c in s:\n        rows[row] += c\n        if row == 0 or row == numRows - 1:\n            direction *= -1\n        row += direction\n    return ''.join(rows)","test_setup_code": "test_cases = [(\"PAYPALISHIRING\", 3, \"PAHNAPLSIIGYIR\"),\n              (\"PAYPALISHIRING\", 4, \"PINALSIGYAHRPI\"),\n              (\"A\", 1, \"A\")]", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given 32-bit signed integer.", "code": "def reverse(x):\n if x >= 0:\n sign = 1\n else:\n sign = -1\n x = -x\n reversed_x = int(str(x)[::-1])\n if reversed_x > (2**31 - 1):\n return 0\n return reversed_x * sign", "task_id": 7, "test_setup_code": "test_cases = [\n (123, 321),\n (-123, -321),\n (120, 21),\n (0, 0)\n]", "test_list": ["for x, expected in test_cases:\n assert reverse(x) == expected"], "challenge_test_list": []}
{"text": "Write a Python function to implement the String to Integer (atoi) conversion.", "code": "class Solution:\n def myAtoi(self, s: str) -> int:\n s = s.strip()\n if not s: return 0\n\n sign = -1 if s[0] == '-' else 1\n if s[0] in ['-', '+']: s = s[1:]\n\n res, i = 0, 0\n while i < len(s) and s[i].isdigit():\n res = res * 10 + ord(s[i]) - ord('0')\n i += 1\n\n return max(-231, min(sign * res, 231 - 1))", "task_id": 875, "test_setup_code": "s = Solution()", "test_list": ["assert s.myAtoi('42') == 42", "assert s.myAtoi(' -42') == -42", "assert s.myAtoi('4193 with words') == 4193", "assert s.myAtoi('words and 987') == 0", "assert s.myAtoi('-91283472332') == -2147483648", "assert s.myAtoi('3.14159') == 3", "assert s.myAtoi('+-12') == 0"], "challenge_test_list": []}
{"text": "Write a function to check if a given integer is a palindrome or not.", "code": "class Solution:\n def isPalindrome(self, x: int) -> bool:\n if x < 0:\n return False\n reverse_x, orig_x = 0, x\n while x > 0:\n reverse_x = reverse_x * 10 + x % 10\n x //= 10\n return reverse_x == orig_x", "task_id": 0, "test_setup_code": "s = Solution()", "test_list": ["assert s.isPalindrome(121) == True", "assert s.isPalindrome(-121) == False", "assert s.isPalindrome(10) == False"], "challenge_test_list": []}
{"text": "Write a function to Regular Expression Matching", "code": "def isMatch(s: str, p: str) -> bool:\n    m, n = len(s), len(p)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = True\n    for j in range(1, n + 1):\n        if p[j - 1] == '*':\n            dp[0][j] = dp[0][j - 1]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if p[j - 1] == '?' or s[i - 1] == p[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            elif p[j - 1] == '*':\n                dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n    return dp[m][n]", "task_id": 10, "test_setup_code": "testCases = [(\"aa\", \"a*\", True), (\"mississippi\", \"mis*is*p*.\", False), (\"aab\", \"c*a*b\", True)]", "test_list": ["assert isMatch(testCases[0][0], testCases[0][1]) == testCases[0][2]", "assert isMatch(testCases[1][0], testCases[1][1]) == testCases[1][2]", "assert isMatch(testCases[2][0], testCases[2][1]) == testCases[2][2]"], "challenge_test_list": []}
{"text": "Write a Python function to find the container with the most water ", "code": "def maxArea(height):\n left = 0\n right = len(height)-1\n max_area = 0\n while left < right:\n current_area = min(height[left], height[right]) * (right - left)\n max_area = max(max_area, current_area)\n if height[left] < height[right]:\n left += 1\n else:\n right -= 1\n return max_area", "task_id": 1771, "test_setup_code": "", "test_list": ["assert maxArea([1,8,6,2,5,4,8,3,7]) == 49", "assert maxArea([1,1]) == 1", "assert maxArea([4,3,2,1,4]) == 16"], "challenge_test_list": []}
{"text": "Write a Python function to convert an integer to a roman numeral.", "code": "class Solution:\n def intToRoman(self, num: int) -> str:\n roman_numeral = ''\n roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n for i in roman_numerals:\n while num >= i:\n roman_numeral += roman_numerals[i]\n num -= i\n return roman_numeral", "task_id": 0, "test_setup_code": "", "test_list": ["assert Solution().intToRoman(3) == 'III'", "assert Solution().intToRoman(4) == 'IV'", "assert Solution().intToRoman(9) == 'IX'", "assert Solution().intToRoman(58) == 'LVIII'", "assert Solution().intToRoman(1994) == 'MCMXCIV'"], "challenge_test_list": []}
{"text": "Write a Python function to convert a Roman numeral string to an integer.", "code": "class Solution:\n def romanToInt(self, s: str) -> int:\n symbols = {\n 'I': 1,\n 'V': 5,\n 'X': 10,\n 'L': 50,\n 'C': 100,\n 'D': 500,\n 'M': 1000\n }\n total = 0\n prev = 0\n for c in s:\n current = symbols[c]\n if current > prev:\n total += current - 2 * prev\n else:\n total += current\n prev = current\n return total\n", "task_id": 0, "test_setup_code": "", "test_list": ["assert Solution().romanToInt('III') == 3", "assert Solution().romanToInt('IV') == 4", "assert Solution().romanToInt('IX') == 9", "assert Solution().romanToInt('LVIII') == 58", "assert Solution().romanToInt('MCMXCIV') == 1994"], "challenge_test_list": []}
{"text": "Write a Python function to find the 3sum question", "code": "def threeSum(nums):\n result = []\n nums.sort()\n for i in range(len(nums)-2):\n if i > 0 and nums[i] == nums[i-1]:\n continue\n left, right = i+1, len(nums)-1\n while left < right:\n s = nums[i] + nums[left] + nums[right]\n if s < 0:\n left += 1\n elif s > 0:\n right -= 1\n else:\n result.append([nums[i], nums[left], nums[right]])\n while left < right and nums[left] == nums[left+1]:\n left += 1\n while left < right and nums[right] == nums[right-1]:\n right -= 1\n left += 1\n right -= 1\n return result", "task_id": 984, "test_setup_code": "", "test_list": ["assert sorted(threeSum([-1,0,1,2,-1,-4])) == [[-1,-1,2],[-1,0,1]]", "assert sorted(threeSum([-2,0,0,2,2])) == [[-2,0,2],[0,0,0],[0,2,2]]", "assert threeSum([1,2,-2,-1]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the sum of three integers in a given array closest to a target value.", "code": "def three_sum_closest(nums, target):\n nums.sort()\n res = float('inf')\n n = len(nums)\n for i in range(n-2):\n l, r = i+1, n-1\n while l<r:\n s = nums[i] + nums[l] + nums[r]\n if abs(s-target) < abs(res-target):\n res = s\n if s < target:\n l += 1\n else:\n r -= 1\n return res", "task_id": 155, "test_setup_code": "", "test_list": ["assert three_sum_closest([-1, 2, 1, -4], 1) == 2", "assert three_sum_closest([1, 1, 1, 0], -100) == 2", "assert three_sum_closest([1, 1, -1], 0) == 1"], "challenge_test_list": []}
{"text": "Wrtie a python function for letter combination of a phone number","code": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if not digits:\n            return []\n        num_to_char = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        result = ['']\n        for digit in digits:\n            temp = []\n            for char in num_to_char[digit]:\n                for combination in result:\n                    temp.append(combination + char)\n            result = temp\n        return result\n", "test_setup_code": "", "test_list": ["assert sol.letterCombinations('23') == ['ad','ae','af','bd','be','bf','cd','ce','cf']","assert sol.letterCombinations('2') == ['a', 'b', 'c']","assert sol.letterCombinations('9') == ['w', 'x', 'y', 'z']"], "challenge_test_list": []}
{"text": "Write a Python function to find all unique quadruplets in the array which gives the sum of target.", "code": "def fourSum(nums, target):\n    nums.sort()\n    result = []\n    for i in range(len(nums)-3):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        for j in range(i+1, len(nums)-2):\n            if j > i+1 and nums[j] == nums[j-1]:\n                continue\n            left = j + 1\n            right = len(nums) - 1\n            while left < right:\n                total = nums[i] + nums[j] + nums[left] + nums[right]\n                if total < target:\n                    left += 1\n                elif total > target:\n                    right -= 1\n                else:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    while left < right and nums[left] == nums[left+1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right-1]:\n                        right -= 1\n                    left += 1\n                    right -= 1\n    return result", "test_setup_code": "from itertools import combinations\nfrom random import randint\n\ndef brute_force(nums, target):\n    result = []\n    for combination in combinations(nums, 4):\n        if sum(combination) == target:\n            result.append(list(combination))\n    return result\n\nnums = [randint(-1000, 1000) for i in range(100)]\ntarget = randint(-5000, 5000)\nexpected = sorted(brute_force(nums, target))", "test_list": ["assert sorted(fourSum(nums, target)) == expected"], "challenge_test_list": []}
