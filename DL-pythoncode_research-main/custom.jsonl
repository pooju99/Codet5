{"text": "Write a Python function to return all possible results of adding parentheses to a given expression and different ways to group them.", "code": "class Solution:\n def diffWaysToCompute(self, expression: str) -> List[int]:\n if expression.isdigit():\n return [int(expression)]\n res = []\n for i in range(len(expression)):\n if expression[i] in '+-':\n left = self.diffWaysToCompute(expression[:i])\n right = self.diffWaysToCompute(expression[i + 1:])\n for l in left:\n for r in right:\n res.append(eval(str(l) + expression[i] + str(r)))\n return res", "task_id": null, "test_setup_code": "", "test_list": ["assert set(Solution().diffWaysToCompute('2-1-1')) == {0, 2}", "assert set(Solution().diffWaysToCompute('23-4*5')) == {-34, -14, -10, -10, 10}"], "challenge_test_list": []}
{
    "text": "Write a Python function to return all root-to-leaf paths of a binary tree as strings.",
    "code": "def binaryTreePaths(root):\n    if not root:\n        return []\n    res = []\n    dfs(root, [], res)\n    return res\n\n\ndef dfs(node, path, res):\n    path.append(str(node.val))\n    if not node.left and not node.right:\n        res.append('->'.join(path))\n    if node.left:\n        dfs(node.left, path, res)\n        path.pop()\n    if node.right:\n        dfs(node.right, path, res)\n        path.pop()",
    "task_id": 1000,
    "test_setup_code": "from collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef create_tree(nodes):\n    if not nodes:\n        return None\n    root = TreeNode(nodes[0])\n    queue = deque([root])\n    i = 1\n    while i < len(nodes):\n        node = queue.popleft()\n        if nodes[i] is not None:\n            node.left = TreeNode(nodes[i])\n            queue.append(node.left)\n        i += 1\n        if i < len(nodes) and nodes[i] is not None:\n            node.right = TreeNode(nodes[i])\n            queue.append(node.right)\n        i += 1\n    return root",
    "test_list": [
      "tree1 = create_tree([1, 2, 3, null, 5])\nassert binaryTreePaths(tree1) == ['1->2->5', '1->3']",
      "tree2 = create_tree([1, 2, 3, 4, 5, 6, 7])\nassert binaryTreePaths(tree2) == ['1->2->4', '1->2->5', '1->3->6', '1->3->7']",
      "tree3 = create_tree([1, 2, 3, 4, null, 5, 6, null, 7])\nassert binaryTreePaths(tree3) == ['1->2->4', '1->2->5->7', '1->3->6']"
    ],
    "challenge_test_list": []
  }
  {
    "text": "Write a Python function to find the bitwise AND of all numbers in a range.",
    "code": "def rangeBitwiseAnd(left: int, right: int) -> int:\n    shift = 0\n    while left != right:\n        left >>= 1\n        right >>= 1\n        shift += 1\n    return left << shift",
    "task_id": 1000,
    "test_setup_code": "",
    "test_list": [
      "assert rangeBitwiseAnd(5, 7) == 5",
      "assert rangeBitwiseAnd(0, 1) == 0",
      "assert rangeBitwiseAnd(1, 2147483647) == 0"
    ],
    "challenge_test_list": []
  }  
  {
    "text": "Write a Python function to determine if a given number is a happy number.",
    "code": "def isHappy(n):\n    seen = set()\n    while n not in seen:\n        seen.add(n)\n        n = sum(int(i)**2 for i in str(n))\n        if n == 1:\n            return True\n    return False",
    "task_id": 1000,
    "test_setup_code": "",
    "test_list": [
      "assert isHappy(19) == True",
      "assert isHappy(2) == False"
    ],
    "challenge_test_list": [
      "assert isHappy(7) == True",
      "assert isHappy(1111111) == True",
      "assert isHappy(123) == False"
    ]
  }
  {
    "text": "Write a Python function to remove all elements from a linked list of integers that have a given value.",
    "code": "def removeElements(head, val):\n    dummy = ListNode(0)\n    dummy.next = head\n    curr = dummy\n    while curr.next:\n        if curr.next.val == val:\n            curr.next = curr.next.next\n        else:\n            curr = curr.next\n    return dummy.next",
    "task_id": 1000,
    "test_setup_code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n    def __repr__(self):\n        if not self.next:\n            return f'{self.val}'\n        return f'{self.val} -> {self.next}'",
    "test_list": [
      "list1 = ListNode(1, ListNode(2, ListNode(6, ListNode(3, ListNode(4, ListNode(5, ListNode(6)))))))\nassert str(removeElements(list1, 6)) == '1 -> 2 -> 3 -> 4 -> 5'",
      "list2 = ListNode(1, ListNode(1))\nassert str(removeElements(list2, 1)) == 'None'",
      "list3 = ListNode(7, ListNode(7, ListNode(7, ListNode(7))))\nassert str(removeElements(list3, 7)) == 'None'"
    ],
    "challenge_test_list": []
  }
  {
    "text": "Write a Python function to count the number of prime numbers less than a non-negative integer, n.",
    "code": "def countPrimes(n):\n    if n < 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)",
    "task_id": 1000,
    "test_setup_code": "",
    "test_list": [
      "assert countPrimes(10) == 4",
      "assert countPrimes(0) == 0",
      "assert countPrimes(1) == 0",
      "assert countPrimes(2) == 0",
      "assert countPrimes(3) == 1"
    ],
    "challenge_test_list": []
  }
  {
    "text": "Write a function in Python to determine if two given strings s and t are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t.",
    "code": "def isIsomorphic(s, t):\n    if len(s) != len(t):\n        return False\n    map_st = {}\n    map_ts = {}\n    for i in range(len(s)):\n        if s[i] in map_st and map_st[s[i]] != t[i]:\n            return False\n        if t[i] in map_ts and map_ts[t[i]] != s[i]:\n            return False\n        map_st[s[i]] = t[i]\n        map_ts[t[i]] = s[i]\n    return True",
    "task_id": 1000,
    "test_setup_code": "",
    "test_list": [
      "assert isIsomorphic('egg', 'add') == True",
      "assert isIsomorphic('foo', 'bar') == False",
      "assert isIsomorphic('paper', 'title') == True",
      "assert isIsomorphic('ab', 'aa') == False"
    ],
    "challenge_test_list": []
  }
  {
    "text": "Write a function to reverse a singly linked list.",
    "code": "def reverseList(head):\n    prev, curr = None, head\n    while curr:\n        curr.next, prev, curr = prev, curr, curr.next\n    return prev",
    "task_id": 1000,
    "test_setup_code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef create_linked_list(lst):\n    if not lst:\n        return None\n    head = ListNode(lst[0])\n    curr = head\n    for val in lst[1:]:\n        curr.next = ListNode(val)\n        curr = curr.next\n    return head",
    "test_list": [
      "lst1 = create_linked_list([1, 2, 3, 4, 5])\nassert linked_list_to_list(reverseList(lst1)) == [5, 4, 3, 2, 1]",
      "lst2 = create_linked_list([1, 2])\nassert linked_list_to_list(reverseList(lst2)) == [2, 1]",
      "lst3 = create_linked_list([])\nassert linked_list_to_list(reverseList(lst3)) == []"
    ],
    "challenge_test_list": []
  }
  {
    "text": "Implement a trie with `insert`, `search`, and `startsWith` methods.",
    "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\n\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str) -> None:\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.is_end_of_word = True\n\n    def search(self, word: str) -> bool:\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                return False\n            node = node.children[c]\n        return node.is_end_of_word\n\n    def startsWith(self, prefix: str) -> bool:\n        node = self.root\n        for c in prefix:\n            if c not in node.children:\n                return False\n            node = node.children[c]\n        return True",
    "task_id": 1000,
    "test_setup_code": "",
    "test_list": [
      "trie = Trie()\ntrie.insert('apple')\nassert trie.search('apple')\nassert not trie.search('app')\nassert trie.startsWith('app')\ntrie.insert('app')\nassert trie.search('app')",
      "trie = Trie()\ntrie.insert('hello')\ntrie.insert('world')\ntrie.insert('trie')\nassert trie.search('trie')\nassert trie.startsWith('h')\nassert trie.startsWith('w')",
      "trie = Trie()\ntrie.insert('python')\ntrie.insert('javascript')\nassert trie.search('python')\nassert trie.startsWith('jav')"
    ],
    "challenge_test_list": []
  }
  {
    "text": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. \n\nReturn true if you can finish all courses. Otherwise, return false.",
    "code": "def canFinish(numCourses, prerequisites):\n    graph = [[] for _ in range(numCourses)]\n    visited = [0 for _ in range(numCourses)]\n    for x, y in prerequisites:\n        graph[x].append(y)\n    def dfs(i):\n        if visited[i] == -1:  # cycle detected\n            return False\n        if visited[i] == 1:\n            return True\n        visited[i] = -1\n        for j in graph[i]:\n            if not dfs(j):\n                return False\n        visited[i] = 1\n        return True\n    for i in range(numCourses):\n        if not dfs(i):\n            return False\n    return True",
    "task_id": 1000,
    "test_setup_code": "",
    "test_list": [
      "assert canFinish(2, [[1,0]]) == True",
      "assert canFinish(2, [[1,0],[0,1]]) == False",
      "assert canFinish(3, [[1,0],[1,2],[0,1]]) == False",
      "assert canFinish(4, [[2,0],[1,0],[3,1],[3,2],[1,3]]) == False",
      "assert canFinish(4, [[2,0],[1,0],[3,1],[3,2]]) == True",
      "assert canFinish(1, []) == True"
    ],
    "challenge_test_list": []
  }
  {
    "text": "Write a Python function that, given the total number of courses and a list of prerequisite pairs, returns the ordering of courses you should take to finish all courses. If there are multiple valid answers, return any of them. If it is impossible to finish all courses, return an empty array.",
    "code": "def findOrder(numCourses, prerequisites):\n    graph = [[] for _ in range(numCourses)]\n    indegrees = [0] * numCourses\n    for course, prereq in prerequisites:\n        graph[prereq].append(course)\n        indegrees[course] += 1\n    queue = [i for i in range(numCourses) if indegrees[i] == 0]\n    res = []\n    while queue:\n        node = queue.pop(0)\n        res.append(node)\n        for neighbor in graph[node]:\n            indegrees[neighbor] -= 1\n            if indegrees[neighbor] == 0:\n                queue.append(neighbor)\n    return res if len(res) == numCourses else []",
    "task_id": 1000,
    "test_setup_code": "",
    "test_list": [
      "assert findOrder(2, [[1,0]]) in [[0,1], [1,0]]",
      "assert findOrder(4, [[1,0],[2,0],[3,1],[3,2]]) in [[0,1,2,3],[0,2,1,3]]",
      "assert findOrder(2, [[0,1],[1,0]]) == []"
    ],
    "challenge_test_list": []
  }
  {
    "text": "Write a Python class to implement the Add and Search Words Data Structure problem, which allows users to add words and search for words with a given pattern. The search function can include the '.' character, which matches any character.",
    "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.word_end = False\n        \nclass WordDictionary:\n    def __init__(self):\n        self.root = TrieNode()\n        \n    def addWord(self, word: str) -> None:\n        curr = self.root\n        for c in word:\n            if c not in curr.children:\n                curr.children[c] = TrieNode()\n            curr = curr.children[c]\n        curr.word_end = True\n        \n    def search(self, word: str) -> bool:\n        return self.searchFrom(self.root, word)\n        \n    def searchFrom(self, node: TrieNode, word: str) -> bool:\n        if not word:\n            return node.word_end\n        c = word[0]\n        if c == '.':\n            for child in node.children.values():\n                if self.searchFrom(child, word[1:]):\n                    return True\n        elif c in node.children:\n            return self.searchFrom(node.children[c], word[1:])\n        \n        return False",
    "task_id": 1000,
    "test_setup_code": "",
    "test_list": [
      "trie = WordDictionary()\ntrie.addWord('bad')\ntrie.addWord('dad')\ntrie.addWord('mad')\nassert trie.search('pad') == False\nassert trie.search('bad') == True\nassert trie.search('.ad') == True\nassert trie.search('b..') == True",
      "trie = WordDictionary()\ntrie.addWord('at')\ntrie.addWord('and')\ntrie.addWord('an')\ntrie.addWord('add')\nassert trie.search('a') == False\nassert trie.search('.at') == False\ntrie.addWord('bat')\nassert trie.search('.at') == True\nassert trie.search('an.') == True\nassert trie.search('a.d.') == False\nassert trie.search('b.') == False\nassert trie.search('a.d') == True\nassert trie.search('.') == False"
    ],
    "challenge_test_list": []
  }
  {
    "text": "Write a Python function to solve the House Robber II problem of LeetCode. The function should take in a list of non-negative integers nums, where each element represents the amount of money that can be robbed from that house, and should return the maximum amount of money that can be robbed while avoiding adjacent houses. In this version of the problem, the houses are arranged in a circle, so the first and last houses are adjacent. ",
    "code": "def rob(nums):\n    if len(nums) == 1:\n        return nums[0]\n    return max(rob_linear(nums[1:]), rob_linear(nums[:-1]))\n\n\ndef rob_linear(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = max(nums[0], nums[1])\n    for i in range(2, len(nums)):\n        dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n    return dp[-1]",
    "task_id": 1000,
    "test_setup_code": "",
    "test_list": [
      "assert rob([2,3,2]) == 3",
      "assert rob([1,2,3,1]) == 4",
      "assert rob([0]) == 0",
      "assert rob([1]) == 1",
      "assert rob([2,7,9,3,1]) == 11",
      "assert rob([1,3,1,3,100]) == 103"
    ],
    "challenge_test_list": []
  }
  {
    "text": "Write a Python function to find the shortest palindrome that can be obtained by adding characters to the start of a given string.",
    "code": "def shortestPalindrome(s):\n    rev_s = s[::-1]\n    for i in range(len(s) + 1):\n        if s.startswith(rev_s[i:]):\n            return rev_s[:i] + s\n\n",
    "task_id": 1009,
    "test_setup_code": "",
    "test_list": [
      "assert shortestPalindrome('aacecaaa') == 'aaacecaaa'",
      "assert shortestPalindrome('abcd') == 'dcbabcd'"
    ],
    "challenge_test_list": []
  }
  {
    "text": "Write a Python function to find the kth largest element in an unsorted array using a min-heap.",
    "code": "import heapq\n\ndef findKthLargest(nums, k):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap[0]\n",
    "task_id": 1000,
    "test_setup_code": "",
    "test_list": [
      "assert findKthLargest([3,2,1,5,6,4], 2) == 5",
      "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4"
    ],
    "challenge_test_list": []
  }
  {
    "task": "Write a Python function to find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.",
    "examples": [
      {
        "input": {
          "k": 3,
          "n": 7
        },
        "output": [
          [1,2,4]
        ]
      },
      {
        "input": {
          "k": 3,
          "n": 9
        },
        "output": [
          [1,2,6],
          [1,3,5],
          [2,3,4]
        ]
      }
    ]
  }
  {
    "text": "Write a Python function to solve the skyline problem. Given a list of buildings represented by their left and right coordinates and heights, return the skyline formed by these buildings. The skyline is represented by a list of (x,y) coordinates, where x is the horizontal position and y is the height at that position. See the examples for more details.",
    "code": "def getSkyline(buildings):\n    events = [(L, -H, R) for L, R, H in buildings]\n    events += list({(R, 0, None) for _, R, _ in buildings})\n    events.sort()\n    res, hp = [], [(0, float('inf'))]\n    for pos, negH, R in events:\n        while pos >= hp[0][1]:\n            heapq.heappop(hp)\n        if negH:\n            heapq.heappush(hp, (negH, R))\n        if not res or res[-1][1] != -hp[0][0]:\n            res.append([pos, -hp[0][0]])\n    return res\n",
    "task_id": 1010,
    "test_setup_code": "",
    "test_list": [
        {
            "input": {
                "buildings": [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]
            },
            "output": [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]
        },
        {
            "input": {
                "buildings": [[0,2,3],[2,5,3]]
            },
            "output": [[0,3],[5,0]]
        }
    ],
    "challenge_test_list": []
}
{
    "text": "Write a Python function to find the area of the largest square containing only 1's in a given binary matrix. The square should have sides parallel to the matrix axes.",
    "code": "def maximalSquare(matrix):\n if not matrix: return 0\n m, n = len(matrix), len(matrix[0])\n dp = [[0] * (n + 1) for _ in range(m + 1)]\n max_len = 0\n for i in range(1, m + 1):\n for j in range(1, n + 1):\n if matrix[i - 1][j - 1] == '1':\n dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n max_len = max(max_len, dp[i][j])\n return max_len * max_len\n",
    "task_id": 230,
    "test_setup_code": "",
    "test_list": [
      "assert maximalSquare([['1', '0', '1', '0', '0'], ['1', '0', '1', '1', '1'], ['1', '1', '1', '1', '1'], ['1', '0', '0', '1', '0']]) == 4",
      "assert maximalSquare([['0', '1'], ['1', '0']]) == 1"
    ],
    "challenge_test_list": []
}
{
    "text": "Write a Python function to count the total number of nodes in a complete binary tree, where the tree is given as a binary tree.",
    "code": "def countNodes(root):\n if not root:\n return 0\n left_height = get_height(root.left)\n right_height = get_height(root.right)\n if left_height == right_height:\n return (1 << left_height) + countNodes(root.right)\n else:\n return (1 << right_height) + countNodes(root.left)\n\ndef get_height(node):\n if not node:\n return 0\n return 1 + get_height(node.left)",
    "task_id": 1058,
    "test_setup_code": "",
    "test_list": [
      {
        "input": {
          "root": {
            "$id": "1",
            "val": 1,
            "left": {
              "$id": "2",
              "val": 2,
              "left": {
                "$id": "4",
                "val": 4,
                "left": {
                  "$id": "7",
                  "val": 7,
                  "left": null,
                  "right": null
                },
                "right": {
                  "$id": "8",
                  "val": 8,
                  "left": null,
                  "right": null
                }
              },
              "right": {
                "$id": "5",
                "val": 5,
                "left": {
                  "$id": "9",
                  "val": 9,
                  "left": null,
                  "right": null
                },
                "right": {
                  "$id": "10",
                  "val": 10,
                  "left": null,
                  "right": null
                }
              }
            },
            "right": {
              "$id": "3",
              "val": 3,
              "left": {
                "$id": "6",
                "val": 6,
                "left": null,
                "right": null
              },
              "right": null
            }
          }
        },
        "output": 10
      },
      {
        "input": {
          "root": {
            "$id": "1",
            "val": 1,
            "left": {
              "$id": "2",
              "val": 2,
              "left": {
                "$id": "4",
                "val": 4,
                "left": {
                  "$id": "7",
                  "val": 7,
                  "left": null,
                  "right": null
                },
                "right": {
                  "$id": "8",
                  "val": 8,
                  "left": null,
                  "right": null
                }
              },
              "right": {
                "$id": "5",
                "val": 5,
                "left": null,
                "right": null
              }
            },
            "right": {
              "$id": "3",
              "val": 3,
              "left": null,
              "right": null
            }
          }
        },
        "output": 6
      }
    ],
    "challenge_test_list": []
}
{
    "text": "Write a Python function to find the total area covered by two rectilinear rectangles in a 2D plane.",
    "code": "def computeArea(self, A, B, C, D, E, F, G, H):\n    area1 = (C - A) * (D - B)\n    area2 = (G - E) * (H - F)\n    overlap_width = min(C, G) - max(A, E)\n    overlap_height = min(D, H) - max(B, F)\n    overlap_area = max(overlap_width, 0) * max(overlap_height, 0)\n    return area1 + area2 - overlap_area\n",
    "task_id": 14,
    "test_setup_code": "",
    "test_list": [
      "assert computeArea(-3, 0, 3, 4, 0, -1, 9, 2) == 45",
      "assert computeArea(-2, -2, 2, 2, -2, -2, 2, 2) == 16",
      "assert computeArea(-2, -2, 2, 2, -3, -3, 3, -1) == 24"
    ],
    "challenge_test_list": []
}

